import { writeFileSync } from "fs";

namespace tetris {
    enum Shape {
        Horizontal,
        Plus,
        Elbow,
        Vertical,
        Square
    }

    class Rock {
        x: number;
        y: number;
        shape: Shape;
        moves: number = 0;

        constructor(x: number, bottom: number, shape: Shape) {
            this.x = x;
            this.shape = shape;
            switch (shape) {
                case Shape.Horizontal:
                    this.y = bottom;
                    break;
                case Shape.Plus:
                    this.y = bottom + 2;
                    break;
                case Shape.Elbow:
                    this.y = bottom + 2;
                    break;
                case Shape.Vertical:
                    this.y = bottom + 3;
                    break;
                case Shape.Square:
                    this.y = bottom + 1;
            }
        }

        detectCollision(rock: Rock): boolean {
            let cells = this.occupiedCells;
            for (const cell of rock.occupiedCells) {
                if (cells.has(cell)) {
                    return true;
                }
            }

            return false;
        }

        get occupiedCells(): Set<string> {
            switch (this.shape) {
                case Shape.Horizontal:
                    return new Set([
                        `${this.x}:${this.y}`,
                        `${this.x + 1}:${this.y}`,
                        `${this.x + 2}:${this.y}`,
                        `${this.x + 3}:${this.y}`
                    ]);
                case Shape.Plus:
                    return new Set([
                        `${this.x + 1}:${this.y}`,
                        `${this.x}:${this.y - 1}`,
                        `${this.x + 1}:${this.y - 1}`,
                        `${this.x + 2}:${this.y - 1}`,
                        `${this.x + 1}:${this.y - 2}`
                    ]);
                case Shape.Elbow:
                    return new Set([
                        `${this.x + 2}:${this.y}`,
                        `${this.x + 2}:${this.y - 1}`,
                        `${this.x}:${this.y - 2}`,
                        `${this.x + 1}:${this.y - 2}`,
                        `${this.x + 2}:${this.y - 2}`
                    ]);
                case Shape.Vertical:
                    return new Set([
                        `${this.x}:${this.y}`,
                        `${this.x}:${this.y - 1}`,
                        `${this.x}:${this.y - 2}`,
                        `${this.x}:${this.y - 3}`
                    ]);
                case Shape.Square:
                    return new Set([
                        `${this.x}:${this.y}`,
                        `${this.x + 1}:${this.y}`,
                        `${this.x}:${this.y - 1}`,
                        `${this.x + 1}:${this.y - 1}`
                    ]);
            }
        }

        get bottom(): number {
            switch (this.shape) {
                case Shape.Horizontal:
                    return this.y;
                case Shape.Plus:
                    return this.y - 2;
                case Shape.Elbow:
                    return this.y - 2;
                case Shape.Vertical:
                    return this.y - 3;
                case Shape.Square:
                    return this.y - 1;
            }
        }

        get right() {
            switch (this.shape) {
                case Shape.Horizontal:
                    return this.x + 3;
                case Shape.Plus:
                    return this.x + 2;
                case Shape.Elbow:
                    return this.x + 2;
                case Shape.Vertical:
                    return this.x;
                case Shape.Square:
                    return this.x + 1;
            }
        }
    }

    let jet: string = ``;
    let jetIndex = 0;
    let moveCount = 0;

    enum Jet {
        Left,
        Right
    }

    let lastCount = 0;
    let lastHighest = 0;
    function nextJet(): Jet {
        let result = Jet.Left;

        if (jet[jetIndex] == ">") {
            result = Jet.Right;
        }

        jetIndex++;
        if (jetIndex == jet.length) {
            jetIndex = 0;
            console.log(`count:${rockCount}, height:${highestFallen}, diffCount:${rockCount - lastCount},  diffHeight:${highestFallen-lastHighest}`);// ${Shape[rockCount % 5]}, ${moveCount}`);
            lastCount = rockCount;
            lastHighest = highestFallen;
        }

        return result;
    }

    function checkPossibleCollisions() {
        if (falling.bottom <= highestFallen) {
            let colliders: Rock[] = fallen.filter(r => r.y >= falling.bottom);
            for (const col of colliders) {
                if (falling.detectCollision(col)) {
                    return true;
                }
            }
        }

        // collision with floor
        return falling.bottom < 1;
    }

    let rockCount = 0;
    let highestFallen = 0;
    function nextRock(): Rock {
        let spawnHeight = highestFallen + 4;
        let shapeIndex = rockCount % 5;
        rockCount++;
        return new Rock(2, spawnHeight, shapeIndex as Shape);
    }

    let falling = null;
    let fallen: Rock[] = [];

    let iterationHeight = 0;
    let lastIterationCount = 0;
    while (rockCount < 1000000) {//1000000000000) {
        // console.log(`${rockCount}, ${Shape[rockCount % 5]}, ${jetIndex}, `);
        falling = nextRock();

        if (rockCount % 1000000 == 0) {
            // console.log(rockCount);
        }

        moveCount = 0;
        while (falling != null) {
            if (moveCount % 2 == 0) {
                // pushed by jet
                if (jetIndex == 0 && rockCount % 5 == 0) {
                    lastIterationCount = rockCount - 1;
                    iterationHeight = highestFallen;
                    // console.log(`${rockCount - 1}, ${highestFallen}, ${Shape[fallen[fallen.length - 1].shape]}, ${fallen[fallen.length - 1].x + ":" + (fallen[fallen.length - 1].y - highestFallen)}, `);
                }
                else if (lastIterationCount + 131 == rockCount) {
                    // console.log(highestFallen - iterationHeight);
                }
                let direction = nextJet();
                if (direction == Jet.Left) {
                    falling.x--;
                    if (falling.x < 0 || checkPossibleCollisions()) {
                        falling.x++;
                    }
                }
                else {
                    falling.x++;
                    if (falling.right > 6 || checkPossibleCollisions()) {
                        falling.x--;
                    }
                }
            }
            else {
                // fall
                falling.y--;

                if (checkPossibleCollisions()) {
                    falling.y++;

                    if (highestFallen < falling.y) {
                        highestFallen = falling.y;
                    }
                    // console.log(highestFallen);
                    fallen.push(falling);
                    falling = null;

                    if (jetIndex + 1 == jet.length && (rockCount + 1) % 5 == 0) {
                        // console.log(`${rockCount - 1}, ${highestFallen}, ${Shape[fallen[fallen.length - 1].shape]}, ${fallen[fallen.length - 1].x + ":" + (fallen[fallen.length - 1].y - highestFallen)}, `);
                    }

                    if(rockCount == 1870) {
                        console.log(highestFallen);
                    }
                }
            }

            moveCount++;
        }
    }

    console.log(highestFallen);
    // console.log(rockCount);
}